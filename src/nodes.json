[
    {
        "name": "Arduino Uno",
        "color": "green",
        "highlighted": true,
        "extras": {
            "type": "controller",
            "analogPorts": 6,
            "digitalPorts": 14
        },
        "outs": [
            "setup()",
            "loop()"
        ]
    },
    {
        "name": "Port",
        "color": "pink",
        "extras": {
            "value": "0",
            "group": "value",
            "type": "port",
            "hasUsages": true,
            "hasPortType": true,
            "portType": "Digital",
            "returnType": "int",
            "selectableOptions": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "30",
                "31",
                "32",
                "33",
                "34",
                "35",
                "36",
                "37",
                "38",
                "39",
                "40",
                "41",
                "42",
                "43",
                "44",
                "45",
                "46",
                "47",
                "48",
                "49",
                "50",
                "51",
                "52",
                "53",
                "54",
                "55",
                "56",
                "57",
                "58",
                "59",
                "60",
                "61",
                "62",
                "63",
                "64",
                "65",
                "66",
                "67",
                "68",
                "69",
                "70",
                "71",
                "72",
                "73",
                "74",
                "75",
                "76",
                "77",
                "78",
                "79",
                "80",
                "81",
                "82",
                "83",
                "84",
                "85",
                "86",
                "87",
                "88",
                "89",
                "90",
                "91",
                "92",
                "93",
                "94",
                "95",
                "96",
                "97",
                "98",
                "99"
            ],
            "hasValue": true
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "Function",
        "extras": {
            "type": "logic",
            "returnType": "void",
            "value": "foo",
            "hasUsages": true,
            "hasValue": true
        },
        "color": "grey",
        "outs": [
            "body"
        ],
        "ins": [
            "declare",
            "in"
        ]
    },
    {
        "name": "Digital I/O",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void digitalWrite(int pin, int value)",
            "void pinMode(int pin, int mode)",
            "int digitalRead(int pin)"
        ]
    },
    {
        "name": "true",
        "color": "cyan",
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/",
            "description": "<div><code>true</code> is often said to be defined as 1, which is correct, but true has a wider definition. Any integer which is non-zero is true, in a Boolean sense. So -1, 2 and -200 are all defined as true, too, in a Boolean sense.</div>"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "ArduinoAPDS_9950",
        "color": "blue",
        "extras": {
            "type": "component"
        },
        "methods": [
            "bool begin()",
            "void get_colorData(struct colorDataRaw * color)",
            "void get_proximityData(struct proximityDataRaw * proximity)",
            "Error error()"
        ]
    },
    {
        "name": "Arduino Nano",
        "color": "green",
        "extras": {
            "type": "controller",
            "analogPorts": 6,
            "digitalPorts": 22
        },
        "outs": [
            "setup()",
            "loop()"
        ]
    },
    {
        "name": "Arduino Mega",
        "color": "green",
        "extras": {
            "type": "controller",
            "analogPorts": 16,
            "digitalPorts": 54
        },
        "outs": [
            "setup()",
            "loop()"
        ]
    },
    {
        "name": "Arduino Leonardo",
        "color": "green",
        "extras": {
            "type": "controller",
            "analogPorts": 12,
            "digitalPorts": 20
        },
        "outs": [
            "setup()",
            "loop()"
        ]
    },
    {
        "name": "Arduino Flora",
        "color": "green",
        "extras": {
            "type": "controller",
            "analogPorts": 4,
            "digitalPorts": 8
        },
        "outs": [
            "setup()",
            "loop()"
        ]
    },
    {
        "name": "Parameter(s)",
        "color": "pink",
        "highlighted": true,
        "extras": {
            "group": "value",
            "type": "parameter",
            "hasUsages": true,
            "hasReturnType": true,
            "value": "0",
            "hasValue": true
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "Variable(s)",
        "color": "pink",
        "extras": {
            "group": "value",
            "type": "variable",
            "name": "var",
            "hasUsages": true,
            "hasReturnType": true,
            "hasUsername": true,
            "hasValue": true
        },
        "methods": [
            "void declaration"
        ],
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "Constant(s)",
        "color": "pink",
        "extras": {
            "group": "value",
            "type": "constant",
            "name": "con",
            "hasUsages": true,
            "hasReturnType": true,
            "hasUsername": true,
            "hasValue": true
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "Condition",
        "extras": {
            "type": "logic",
            "selectableOptions": [
                "==",
                "!=",
                "<",
                ">",
                "<=",
                ">=",
                "<=>"
            ],
            "value": "==",
            "hasValue": true
        },
        "color": "grey",
        "outs": [
            "body",
            "else"
        ],
        "ins": [
            "void set(T xValue)",
            "void set(T yValue)"
        ]
    },
    {
        "name": "While Loop",
        "extras": {
            "type": "logic",
            "selectableOptions": [
                "==",
                "!=",
                "<",
                ">",
                "<=",
                ">=",
                "<=>"
            ],
            "value": "==",
            "hasValue": true
        },
        "color": "grey",
        "outs": [
            "body",
            "else"
        ],
        "ins": [
            "startValue",
            "stopValue"
        ]
    },
    {
        "name": "Analog I/O",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void analoglWrite(int pin, int value)",
            "void pinMode(int pin, int mode)",
            "void analogReference(int type)"
        ]
    },
    {
        "name": "Time",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void delay(int ms)",
            "void delayMicroseconds(int us)",
            "unsigned long micros()",
            "unsigned long millis()"
        ]
    },
    {
        "name": "Math",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void delay(int ms)",
            "int abs(int x)",
            "int constrain(int x, int a, int b)",
            "int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)",
            "any? max(any x, any y)",
            "any? min(any x, any y)",
            "double pow(float base, float exponent)",
            "double sq(any x)",
            "double sqrt(any x)"
        ]
    },
    {
        "name": "Trigonometry",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "double cos(float rad)",
            "double sin(float rad)",
            "double tan(float rad)"
        ]
    },
    {
        "name": "Random Numbers",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void randomSeed(long seed)",
            "long random(? max)",
            "long random(? min, ? max)"
        ]
    },
    {
        "name": "Zero, Due & MKR Family",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void analogReadResolution(bits bits)",
            "void analogWriteResolution(bits bits)"
        ]
    },
    {
        "name": "Advanced I/O",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "void noTone(int pin)",
            "unsigned long pulseIn(int pin, int value)",
            "unsigned long pulseIn(int pin, int value,unsigned long timeout)",
            "unsigned long pulseInLong(int pin, int value)",
            "unsigned long pulseInLong(int pin, int value,unsigned long timeout)",
            "byte shiftIn(int dataPin, int clockPin, int bitOrder)",
            "void shiftOut(int dataPin, int clockPin, int bitOrder, byte value)",
            "void tone(int pin, unsigned int frequency)",
            "void tone(int pin, unsigned int frequency, unsigned long duration)"
        ]
    },
    {
        "name": "Serial",
        "color": "cyan",
        "extras": {
            "type": "built-in"
        },
        "methods": [
            "int available()",
            "int availableForWrite()",
            "void begin(long speed)",
            "void end()",
            "bool find(char target)",
            "bool findUntil(char target)",
            "void flush()",
            "float parseFloat()",
            "int parseInt()",
            "int peek()",
            "size_t print(int val)",
            "size_t println(int val)",
            "int read()",
            "size_t readBytes(char buffer, int length)",
            "size_t readBytesUntil(char character, char buffer, int length)",
            "String readString()",
            "String readStringUntil()",
            "void setTimeout(long time)",
            "size_t write(byte val)",
            "void serialEvent()"
        ]
    },
    {
        "name": "false",
        "color": "cyan",
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "HIGH",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "LOW",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "INPUT",
        "color": "cyan",
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "INPUT_PULLUP",
        "color": "cyan",
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "OUTPUT",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "LED_BUILTIN",
        "color": "cyan",
        "highlighted": true,
        "extras": {
            "type": "built-in-constant",
            "returnType": "int",
            "hasUsages": true,
            "link": "https: //www.arduino.cc/reference/en/language/variables/constants/constants/"
        },
        "ins": [
            "in"
        ],
        "outs": [
            "out"
        ]
    },
    {
        "name": "TwoWire Interface",
        "color": "blue",
        "extras": {
            "type": "component",
            "library": "Wire.h"
        },
        "methods": [
            "void begin()",
            "void beginTransmission()",
            "void setClock()",
            "void onReceive()",
            "void onRequest()",
            "byte requestFrom()",
            "byte endTransmission()",
            "byte write()",
            "byte available()",
            "byte read()"
        ]
    },
    {
        "name": "PWM Servo",
        "color": "orange",
        "extras": {
            "type": "component",
            "library": "Adafruit_PWMServoDriver.h"
        },
        "methods": [
            "void begin(uint8_t prescale=0)",
            "void sleep()",
            "void wakeup()",
            "void setExtClk(uint8_t prescale)",
            "void setPWMFreq(float freq)",
            "void setOutputMode(bool totempole)",
            "void setPWM(uint8_t num, uint16_t on, uint16_t off)",
            "void setPin(uint8_t num, uint16_t val, bool invert=false)",
            "void writeMicroseconds(uint8_t num, uint16_t Microseconds)",
            "void setOscillatorFrequency(uint32_t freq)",
            "uint8_t getPWM(uint8_t num)",
            "uint8_t readPrescale()",
            "uint32_t getOscillatorFrequency()"
        ]
    },
    {
        "name": "Servo",
        "color": "orange",
        "extras": {
            "type": "component",
            "library": "Servo.h",
            "link": "arduino.cc/reference/en/libraries/servo/"
        },
        "methods": [
            "uint8_t attach(int pin)",
            "uint8_t attach(int pin, int min, int max)",
            "void detach()",
            "void write(int value)",
            "void writeMicroseconds(int value)",
            "int read()",
            "int readMicroseconds()",
            "bool attached()"
        ]
    },
    {
        "name": "Stepper",
        "color": "orange",
        "extras": {
            "type": "component",
            "library": "Stepper.h"
        },
        "methods": [
            "Stepper(int, int, int)",
            "Stepper(int, int, int, int, int)",
            "Stepper(int, int, int, int, int, int)",
            "void setSpeed(long whatSpeed)",
            "void step(int number_of_steps)",
            "int version()"
        ]
    },
    {
        "name": "Adafruit_BMP085",
        "color": "orange",
        "extras": {
            "type": "component",
            "library": "Adafruit_BMP085.h",
            "link": "https: //randomnerdtutorials.com/guide-for-bmp180-barometric-sensor-with-arduino/",
            "description": "Barometric pressure and temperature sensor, by Adafruit"
        },
        "methods": [
            "bool begin(uint8_t mode = BMP085_ULTRAHIGHRES, TwoWire *wire = &Wire)",
            "float readTemperature()",
            "int32_t readPressure",
            "int32_t readSealevelPressure(float altitude_meters = 0)",
            "float readAltitude(float sealevelPressure = 101325)",
            "int16_t readRawTemperature()",
            "uint32_t readRawPressure()"
        ]
    },
    {
        "name": "SoftwareWire",
        "color": "orange",
        "extras": {
            "type": "component",
            "library": "Wire.h",
            "link": "https: //www.arduino.cc/reference/en/libraries/softwarewire/",
            "description": "Creates a software I2C/TWI bus on every pins."
        },
        "methods": [
            "SoftwareWire(uint8_t sdaPin, uint8_t sclPin, boolean pullups = true, boolean detectClockStretch = true)",
            "void end()",
            "void begin()",
            "void setClock(uint32_t clock)",
            "void beginTransmission(uint8_t address)",
            "void beginTransmission(int address)",
            "uint8_t endTransmission(boolean sendStop = true)",
            "uint8_t requestFrom(uint8_t address, uint8_t size, boolean sendStop = true)",
            "uint8_t requestFrom(int address, int size, boolean sendStop = true)",
            "size_t write(uint8_t data)",
            "size_t write(const uint8_t *data, size_t quantity)",
            "int available(void)",
            "int read(void)",
            "int readBytes(uint8_t* buf, uint8_t size)",
            "int readBytes(char * buf, uint8_t size)",
            "int readBytes(char * buf, int size)",
            "int peek(void)",
            "void setTimeout(long timeout)",
            "void printStatus(Print& Ser)"
        ]
    }
]